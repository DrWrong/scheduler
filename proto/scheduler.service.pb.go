// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler.service.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	scheduler.service.proto

It has these top-level messages:
	AckResponse
	TaskAck
	Task
	ScheduleTaskRequest
	ScheduleTaskResponse
	FetchTaskRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type AckResponse struct {
}

func (m *AckResponse) Reset()                    { *m = AckResponse{} }
func (m *AckResponse) String() string            { return proto1.CompactTextString(m) }
func (*AckResponse) ProtoMessage()               {}
func (*AckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TaskAck struct {
	TaskGroup string `protobuf:"bytes,1,opt,name=taskGroup" json:"taskGroup,omitempty"`
	TaskID    string `protobuf:"bytes,2,opt,name=taskID" json:"taskID,omitempty"`
	Successed bool   `protobuf:"varint,3,opt,name=successed" json:"successed,omitempty"`
	Result    []byte `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *TaskAck) Reset()                    { *m = TaskAck{} }
func (m *TaskAck) String() string            { return proto1.CompactTextString(m) }
func (*TaskAck) ProtoMessage()               {}
func (*TaskAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TaskAck) GetTaskGroup() string {
	if m != nil {
		return m.TaskGroup
	}
	return ""
}

func (m *TaskAck) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *TaskAck) GetSuccessed() bool {
	if m != nil {
		return m.Successed
	}
	return false
}

func (m *TaskAck) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type Task struct {
	// 任务ID
	TaskID string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	// 任务所在的分组
	TaskGroup string `protobuf:"bytes,2,opt,name=taskGroup" json:"taskGroup,omitempty"`
	// 任务原来ID， 由它保证任务仅能提交一次， 为空时，表示任务可以被提交多次
	TaskOriginalID string `protobuf:"bytes,3,opt,name=taskOriginalID" json:"taskOriginalID,omitempty"`
	// 任务名称
	TaskName string `protobuf:"bytes,4,opt,name=taskName" json:"taskName,omitempty"`
	// 参数
	Params []byte `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
	// 任务执行时间 为0时表示立即执行
	ScheduleAt int64 `protobuf:"varint,6,opt,name=scheduleAt" json:"scheduleAt,omitempty"`
	// 任务重试的次数， 超过重试次数后会被认为失败
	MaxRetryTime int64 `protobuf:"varint,7,opt,name=maxRetryTime" json:"maxRetryTime,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto1.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Task) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *Task) GetTaskGroup() string {
	if m != nil {
		return m.TaskGroup
	}
	return ""
}

func (m *Task) GetTaskOriginalID() string {
	if m != nil {
		return m.TaskOriginalID
	}
	return ""
}

func (m *Task) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *Task) GetParams() []byte {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Task) GetScheduleAt() int64 {
	if m != nil {
		return m.ScheduleAt
	}
	return 0
}

func (m *Task) GetMaxRetryTime() int64 {
	if m != nil {
		return m.MaxRetryTime
	}
	return 0
}

type ScheduleTaskRequest struct {
	TaskGroup  string  `protobuf:"bytes,1,opt,name=taskGroup" json:"taskGroup,omitempty"`
	Task       *Task   `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	BatchTasks []*Task `protobuf:"bytes,3,rep,name=batchTasks" json:"batchTasks,omitempty"`
}

func (m *ScheduleTaskRequest) Reset()                    { *m = ScheduleTaskRequest{} }
func (m *ScheduleTaskRequest) String() string            { return proto1.CompactTextString(m) }
func (*ScheduleTaskRequest) ProtoMessage()               {}
func (*ScheduleTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ScheduleTaskRequest) GetTaskGroup() string {
	if m != nil {
		return m.TaskGroup
	}
	return ""
}

func (m *ScheduleTaskRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *ScheduleTaskRequest) GetBatchTasks() []*Task {
	if m != nil {
		return m.BatchTasks
	}
	return nil
}

type ScheduleTaskResponse struct {
	Task       *Task   `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	BatchTasks []*Task `protobuf:"bytes,2,rep,name=batchTasks" json:"batchTasks,omitempty"`
}

func (m *ScheduleTaskResponse) Reset()                    { *m = ScheduleTaskResponse{} }
func (m *ScheduleTaskResponse) String() string            { return proto1.CompactTextString(m) }
func (*ScheduleTaskResponse) ProtoMessage()               {}
func (*ScheduleTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ScheduleTaskResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *ScheduleTaskResponse) GetBatchTasks() []*Task {
	if m != nil {
		return m.BatchTasks
	}
	return nil
}

type FetchTaskRequest struct {
	TaskGroup string `protobuf:"bytes,1,opt,name=taskGroup" json:"taskGroup,omitempty"`
}

func (m *FetchTaskRequest) Reset()                    { *m = FetchTaskRequest{} }
func (m *FetchTaskRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchTaskRequest) ProtoMessage()               {}
func (*FetchTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchTaskRequest) GetTaskGroup() string {
	if m != nil {
		return m.TaskGroup
	}
	return ""
}

func init() {
	proto1.RegisterType((*AckResponse)(nil), "AckResponse")
	proto1.RegisterType((*TaskAck)(nil), "TaskAck")
	proto1.RegisterType((*Task)(nil), "Task")
	proto1.RegisterType((*ScheduleTaskRequest)(nil), "ScheduleTaskRequest")
	proto1.RegisterType((*ScheduleTaskResponse)(nil), "ScheduleTaskResponse")
	proto1.RegisterType((*FetchTaskRequest)(nil), "FetchTaskRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	ScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*ScheduleTaskResponse, error)
	FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (Scheduler_FetchTaskClient, error)
	AckTask(ctx context.Context, in *TaskAck, opts ...grpc.CallOption) (*AckResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) ScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*ScheduleTaskResponse, error) {
	out := new(ScheduleTaskResponse)
	err := grpc.Invoke(ctx, "/Scheduler/ScheduleTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (Scheduler_FetchTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/Scheduler/FetchTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerFetchTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_FetchTaskClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type schedulerFetchTaskClient struct {
	grpc.ClientStream
}

func (x *schedulerFetchTaskClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) AckTask(ctx context.Context, in *TaskAck, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := grpc.Invoke(ctx, "/Scheduler/AckTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	ScheduleTask(context.Context, *ScheduleTaskRequest) (*ScheduleTaskResponse, error)
	FetchTask(*FetchTaskRequest, Scheduler_FetchTaskServer) error
	AckTask(context.Context, *TaskAck) (*AckResponse, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_ScheduleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ScheduleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Scheduler/ScheduleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ScheduleTask(ctx, req.(*ScheduleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_FetchTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchTaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).FetchTask(m, &schedulerFetchTaskServer{stream})
}

type Scheduler_FetchTaskServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type schedulerFetchTaskServer struct {
	grpc.ServerStream
}

func (x *schedulerFetchTaskServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_AckTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AckTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Scheduler/AckTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AckTask(ctx, req.(*TaskAck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleTask",
			Handler:    _Scheduler_ScheduleTask_Handler,
		},
		{
			MethodName: "AckTask",
			Handler:    _Scheduler_AckTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchTask",
			Handler:       _Scheduler_FetchTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scheduler.service.proto",
}

func init() { proto1.RegisterFile("scheduler.service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x51, 0xcf, 0x93, 0x30,
	0x14, 0x4d, 0xc7, 0x36, 0xc6, 0xfd, 0xd0, 0x68, 0xfd, 0xd4, 0x4a, 0x8c, 0x41, 0x12, 0x95, 0xa7,
	0x66, 0x99, 0x8f, 0x3e, 0x61, 0x16, 0xcd, 0x5e, 0x34, 0xa9, 0x7b, 0x30, 0xbe, 0x75, 0x5d, 0xe3,
	0x08, 0x63, 0x60, 0x0b, 0x46, 0xff, 0x87, 0x3f, 0xcf, 0x1f, 0x63, 0x5a, 0xd8, 0x60, 0x64, 0x66,
	0xdf, 0x13, 0x39, 0xa7, 0xf7, 0x9e, 0x73, 0xee, 0xa5, 0x85, 0xa7, 0x5a, 0xec, 0xe4, 0xb6, 0xde,
	0x4b, 0x45, 0xb5, 0x54, 0x3f, 0x53, 0x21, 0x69, 0xa9, 0x8a, 0xaa, 0x88, 0xee, 0xc1, 0x4d, 0x22,
	0x32, 0x26, 0x75, 0x59, 0x1c, 0xb4, 0x8c, 0x6a, 0x70, 0xd7, 0x5c, 0x67, 0x89, 0xc8, 0xf0, 0x73,
	0xf0, 0x2a, 0xae, 0xb3, 0x8f, 0xaa, 0xa8, 0x4b, 0x82, 0x42, 0x14, 0x7b, 0xac, 0x23, 0xf0, 0x13,
	0x98, 0x1a, 0xb0, 0x5a, 0x92, 0x91, 0x3d, 0x6a, 0x91, 0xe9, 0xd2, 0xb5, 0x10, 0x52, 0x6b, 0xb9,
	0x25, 0x4e, 0x88, 0xe2, 0x19, 0xeb, 0x08, 0xd3, 0xa5, 0xa4, 0xae, 0xf7, 0x15, 0x19, 0x87, 0x28,
	0xf6, 0x59, 0x8b, 0xa2, 0xbf, 0x08, 0xc6, 0xc6, 0xb7, 0x27, 0x8b, 0x86, 0xb2, 0x5d, 0x98, 0xd1,
	0x30, 0xcc, 0x6b, 0xb8, 0x6f, 0xc0, 0x67, 0x95, 0x7e, 0x4f, 0x0f, 0x7c, 0xbf, 0x5a, 0x5a, 0x67,
	0x8f, 0x0d, 0x58, 0x1c, 0xc0, 0xcc, 0x30, 0x9f, 0x78, 0x2e, 0x6d, 0x00, 0x8f, 0x9d, 0xb0, 0x71,
	0x2e, 0xb9, 0xe2, 0xb9, 0x26, 0x93, 0x26, 0x5a, 0x83, 0xf0, 0x0b, 0x80, 0xe3, 0xee, 0x92, 0x8a,
	0x4c, 0x43, 0x14, 0x3b, 0xac, 0xc7, 0xe0, 0x08, 0xfc, 0x9c, 0xff, 0x62, 0xb2, 0x52, 0xbf, 0xd7,
	0x69, 0x2e, 0x89, 0x6b, 0x2b, 0xce, 0xb8, 0xa8, 0x86, 0x47, 0x5f, 0xda, 0x0e, 0x33, 0x25, 0x93,
	0x3f, 0x6a, 0xa9, 0xab, 0x2b, 0x1b, 0x7e, 0x06, 0x63, 0x03, 0xec, 0xb4, 0x37, 0x8b, 0x09, 0xb5,
	0x9d, 0x96, 0xc2, 0xaf, 0x00, 0x36, 0xbc, 0x12, 0x3b, 0x43, 0x69, 0xe2, 0x84, 0x4e, 0x57, 0xd0,
	0x3b, 0x88, 0xbe, 0xc2, 0xed, 0xb9, 0x6d, 0xf3, 0x93, 0x4f, 0xca, 0xe8, 0x9a, 0xf2, 0xe8, 0x7f,
	0xca, 0x73, 0x78, 0xf0, 0x41, 0xb6, 0xe8, 0x4e, 0xd3, 0x2c, 0xfe, 0x20, 0xf0, 0x8e, 0x61, 0x14,
	0x7e, 0x07, 0x7e, 0x3f, 0x19, 0xbe, 0xa5, 0x17, 0xf6, 0x13, 0x3c, 0xa6, 0x17, 0xe3, 0xbf, 0x01,
	0xef, 0x64, 0x8e, 0x1f, 0xd2, 0x61, 0x90, 0xa0, 0xc9, 0x3b, 0x47, 0xf8, 0x25, 0xb8, 0x89, 0xc8,
	0x6c, 0xd9, 0x8c, 0xb6, 0xd7, 0x3a, 0xf0, 0x69, 0xef, 0xbe, 0xbf, 0x77, 0xbf, 0x4d, 0xec, 0x3b,
	0xd8, 0x4c, 0xed, 0xe7, 0xed, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xab, 0xde, 0x9c, 0xf9, 0x29,
	0x03, 0x00, 0x00,
}
